[tool.poetry]
name = "{{cookiecutter.project_name}}"
version = "0.1.0"
description = "{{ cookiecutter.project_short_description }}"
authors = ["{{cookiecutter.author}}"]
readme = "README.md"
packages = [{include = "{{cookiecutter.project_slug}}", from = "src"}]

# [[tool.poetry.source]]
# # run poetry config "http-basic.zalando" MAVEN_USERNAME MAVEN_PASSWORD
# name = "zalando"
# url = "https://pypi.zalando.net/repository/pypi/simple/"
# priority = "primary"

[[tool.poetry.source]]
name = "PyPI"
priority = "primary" # "supplemental" if using nexus

[tool.poetry.dependencies]
python = ">={{cookiecutter.minimum_python_version}}"

[tool.poetry.group.dev.dependencies]
mypy = "^1.11.2"
pytest-cov = "^5.0.0"
pygments = "^2.18.0"  # highlighting in pytest error

[build-system]
requires = ["poetry-core>=1.8"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 88
target-version = "py{{cookiecutter.minimum_python_version.replace('.', '')}}"
exclude = []
[tool.ruff.format]
preview = true
[tool.ruff.lint]
preview = true
select = ["ALL"]
ignore = [
    # The following rules may cause conflicts when used with the formatter: `COM812`,
    # `ISC001`. To avoid unexpected behavior, we recommend disabling these rules
    "COM812",
    "ISC001",
    "CPY", # flake8-copyright, I don't think we do copyright for internal code
    "N812", # Lowercase module imported as non-lowercase
    "D10",  # missing docstrings (100 module, 101 class, 102 method, ...)
    "DOC201", # document return type
]
[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    "S101", # asserts allowed in tests...
]
[tool.ruff.lint.flake8-annotations]
mypy-init-return = true
[tool.ruff.lint.isort]
force-single-line = true
[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "--strict-markers --cov={{cookiecutter.project_slug}} --cov-branch --junit-xml xunit-reports/xunit-result-ut.xml --cov-report xml:coverage-reports/coverage-ut.xml"
testpaths = ["tests"]
junit_family="legacy"

[[tool.mypy.overrides]]
module = []
ignore_missing_imports = true

[tool.pyright]
include = ["src/", "tests/"]
exclude = [
    "**/__pycache__",
]
pythonVersion = "{{cookiecutter.minimum_python_version}}"
pythonPlatform = "Linux"
typeCheckingMode = "standard"
